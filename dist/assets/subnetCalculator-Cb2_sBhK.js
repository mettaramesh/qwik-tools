import{m as k,i as y,b as f,c as x}from"./index-d8F-AHjr.js";function C(c,b){if(!/^\d{1,3}(\.\d{1,3}){3}$/.test(c))return{error:"Invalid IP address."};let e=null,i=null;if(/^\/(\d{1,2})$/.test(b)){if(e=parseInt(b.replace("/",""),10),isNaN(e)||e<0||e>32)return{error:"Invalid CIDR."};i=x(e)}else if(/^\d{1,3}(\.\d{1,3}){3}$/.test(b)){if(i=b,e=k(i),e===null)return{error:"Invalid subnet mask."}}else return{error:"Enter subnet mask (e.g. 255.255.255.0) or CIDR (e.g. /24)."};const n=y(c),u=y(i);if(n===null||u===null)return{error:"Invalid IP or mask."};const s=n&u,a=s|~u>>>0,p=e===32?s:s+1,o=e===32?s:a-1,h=e>=31?e===31?2:1:Math.max(0,a-s-1),m=a-s+1,r=`${f(s)} - ${f(a)}`,t=n>>>24&255;let l="";t>=1&&t<=126?l="A":t===127?l="A (Loopback)":t>=128&&t<=191?l="B":t>=192&&t<=223?l="C":t>=224&&t<=239?l="D (Multicast)":t>=240&&t<=254?l="E (Reserved)":l="Unknown";let d="Public Unicast";return t===10||t===172&&(n>>>16&240)===16||t===192&&(n>>>8&255)===168?d="Private Unicast":t===127?d="Loopback":t>=224&&t<=239?d="Multicast":t>=240&&t<=254?d="Reserved":n===4294967295&&(d="Broadcast"),{network:f(s),broadcast:f(a),firstHost:f(p),lastHost:f(o),usableHosts:h,totalHosts:m,range:r,mask:i,cidr:"/"+e,ipClass:l,ipType:d,error:null}}async function v(c,b){if(!c)return;if(c.innerHTML="",!document.getElementById("subnet-calc-css")){const s=document.createElement("link");s.rel="stylesheet",s.href="subnetCalculator.css",s.id="subnet-calc-css",document.head.appendChild(s)}const e=document.createElement("div");e.id="subnet-calculator-tool",e.className="tool-container";const n=await(await fetch("subnetCalculator.html")).text();e.innerHTML=n,c.appendChild(e);const u=e.querySelector("#subnet-calc-btn");u&&u.addEventListener("click",()=>{const s=e.querySelector("#subnet-ip").value.trim(),a=e.querySelector("#subnet-mask").value.trim(),p=e.querySelector("#subnet-progress"),o=e.querySelector("#subnet-feedback"),h=e.querySelector("#subnet-results"),m=e.querySelector("#subnet-error");p.classList.remove("hidden"),o.classList.add("hidden"),o.textContent="",setTimeout(()=>{const r=C(s,a);if(p.classList.add("hidden"),r.error){m.textContent=r.error,m.classList.remove("hidden"),h.classList.remove("hidden"),["network","broadcast","first-host","last-host","usable-hosts","total-hosts","range","mask","cidr","class","type"].forEach(t=>{e.querySelector("#result-"+t).textContent=""}),o.textContent="Please check your input and try again.",o.classList.remove("hidden");return}m.classList.add("hidden"),e.querySelector("#result-network").textContent=r.network,e.querySelector("#result-broadcast").textContent=r.broadcast,e.querySelector("#result-first-host").textContent=r.firstHost,e.querySelector("#result-last-host").textContent=r.lastHost,e.querySelector("#result-usable-hosts").textContent=r.usableHosts,e.querySelector("#result-total-hosts").textContent=r.totalHosts,e.querySelector("#result-range").textContent=r.range,e.querySelector("#result-mask").textContent=r.mask,e.querySelector("#result-cidr").textContent=r.cidr,e.querySelector("#result-class").textContent=r.ipClass,e.querySelector("#result-type").textContent=r.ipType,h.classList.remove("hidden"),o.textContent="Calculation complete!",o.classList.remove("hidden")},250)})}function q(){}export{C as calculateSubnet,v as load,q as setupSubnetCalculator};
