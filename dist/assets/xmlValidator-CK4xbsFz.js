const f={defaultInitialMemoryPages:256,defaultMaxMemoryPages:512,max:65536};function g(t,n){return Array.isArray(t)||(t=[t]),t.map((e,s)=>typeof e=="string"?{fileName:`file_${s}.${n}`,contents:e}:e)}function y(t){const n=g(t.xml,"xml"),e=t.extension||"schema";v(["schema","relaxng"],"extension",e);const s=g(t.schema||[],"xsd"),m=g(t.preload||[],"xml");if(!t.disableFileNameValidation){for(const r of n.concat(s))if(/(^|\s)-/.test(r.fileName))throw new Error(`Invalid file name "${r.fileName}" that would be interpreted as a command line option.`)}const i=t.normalization||"";v(["","format","c14n"],"normalization",i);const d=n.concat(s,m);let l=[];if(s.forEach(function(r){l.push(`--${e}`),l.push(r.fileName)}),i?l.push(`--${i}`):l.push("--noout"),n.forEach(function(r){l.push(r.fileName)}),t.modifyArguments&&(l=t.modifyArguments(l),!Array.isArray(l)))throw new Error("modifyArguments must return an array of arguments");const u={inputFiles:d,args:l,initialMemory:t.initialMemoryPages||f.defaultInitialMemoryPages,maxMemory:t.maxMemoryPages||f.defaultMaxMemoryPages};return h(u),u}function x(t){return t===0?!0:t===3||t===4?!1:null}function v(t,n,e){if(!t.includes(e)){const s=typeof e=="string"?`"${e}"`:e;throw new Error(`Invalid value for option ${n}: ${s}`)}}function h({initialMemory:t,maxMemory:n}){if(t<0||n<t||n>f.max)throw new Error(`Invalid memory options. Expected 0 < initialMemoryPages (${t}) <= maxMemoryPages (${n}) <= 4GiB (${f.max})`)}function w(t){return t.split(`
`).slice(0,-2).map(e=>{const[s,m,...i]=e.split(":");return s&&m&&i.length?{rawMessage:e,message:i.join(":").trim(),loc:{fileName:s,lineNumber:parseInt(m)}}:{rawMessage:e,message:e,loc:null}}).filter(e=>!(!e.loc&&e.rawMessage.trim().endsWith(" validates")))}function M(t){const n=y(t);var e;return new Promise(function(m,i){function d(r){var o=r.data;const c=x(o.exitCode);if(c===null){const a=new Error(o.stderr);a.code=o.exitCode,i(a)}else m({valid:c,normalized:o.stdout,errors:c?[]:w(o.stderr),rawOutput:o.stderr})}function l(r){i(r)}e=new Worker(new URL("/assets/xmllint-browser-D9yx92E8.js",import.meta.url),{type:"module"});var u=e.addEventListener.bind(e);u("message",d),u("error",l),e.postMessage(n)}).finally(()=>{if(e)return e.terminate()})}async function L(t){const e=await(await fetch("xmlValidator.html")).text();t.innerHTML=e,E()}function E(){const t=document.getElementById("xml-validator-input"),n=document.getElementById("xml-validator-xsd"),e=document.getElementById("xml-validator-output"),s=document.getElementById("xml-validate-btn"),m=document.getElementById("xml-clear-btn"),i=document.getElementById("xml-validator-error");document.querySelector(".tool-interface");function d(r){i.textContent=r,i.classList.remove("hidden")}function l(){i.textContent="",i.classList.add("hidden")}function u(r){try{const a=new DOMParser().parseFromString(r,"application/xml").querySelector("parsererror");return a?a.textContent||"Invalid XML":!0}catch(o){return o.message}}document.querySelectorAll(".copy-btn").forEach(r=>{r.onclick=function(){const o=r.getAttribute("data-target"),c=document.getElementById(o);c&&navigator.clipboard.writeText(c.value||"").then(()=>{const a=r.textContent;r.textContent="Copied!",setTimeout(()=>{r.textContent=a},1e3)})}}),s.onclick=async()=>{l();const r=t.value.trim(),o=n.value.trim();if(!r){d("Please enter XML to validate.");return}if(o.length>0&&o.length<40){d("Warning: XSD input is very short. Please check your schema.");return}const c=u(r);if(c!==!0){e.value="❌ Invalid XML: "+c;return}if(!o){e.value="✅ XML is well-formed.";return}e.value="Validating against XSD...";try{const a=await M({xml:[{fileName:"input.xml",contents:r}],schema:[o]});a.valid?e.value="✅ XML is valid against the XSD.":Array.isArray(a.errors)&&a.errors.length>0?e.value=`❌ Schema validation failed:
`+a.errors.map(p=>p.message).join(`
`):e.value=`❌ XML is not valid, but no error details were returned.
Raw result: `+JSON.stringify(a)}catch(a){e.value="❌ Validation error: "+((a==null?void 0:a.message)||a)}},m.onclick=()=>{t.value="",n.value="",e.value="",l()}}export{L as load};
